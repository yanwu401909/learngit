1、git全局设置
	git config --global user.name "nazul"
	git config --global user.email "xxxx@xxxx.com"
	git config --global color.ui true
	git config --global alias.st status
	git config --global alias.co checkout
	git config --global alias.ci commit
	git config --global alias.br branch
	git config --global alias.unstage 'reset HEAD'
	git config --global alias.last 'log -1'
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
2、初始化git仓库
	git init
	注：建议git中的文件使用标准的utf-8编码，如果食用notepad++作为文本编辑器，需要设置编码格式为utf-8 without bom。
3、基本操作
	git add filename	--添加文件到工作区（仓库）
	git commit -m “remark”	--提交文件到仓库中，并添加备注信息
	git status		--查看工作区和仓库状态，可以查看到未提交到工作区的文件以及添加到工作区，但是未提交到仓库中的文件。
	git diff filename	--文件对比
	git log 		--查看提交日志
	git log --pretty=oneline	--每次提交输出一行记录
	git reset --hard HEAD^	--回溯至上一个提交版本，注：HEAD表示当前版本，HEAD^表示上一版本，依次类推：上上版本为HEAD^^，可以使用提交时的版本id代替，id只需输入足以区分版本的位数即可。
	git reset --hard 5345234	--如上所述，回溯至某个版本
	git reflog		--查看执行的每个命令，可以作为查看版本id的工具
	git checkout -- filename	--放弃暂存区中该文件的修改，将文件恢复至仓库中的最后一版本。
 	git reset HEAD filename		--将提交到仓库的文件恢复到暂存区状态		git rm filename		--从版本库中删除文件，，然后用git commit提交
	ssh-keygen -t rsa -C "email.address"	--生成ssh密钥对，并将公钥添加到git官方平台中
	git remote add origin git@github.com:username/learngit.git	--关联本地仓库和git线上仓库，远程仓库默认名为origin
	git push -u origin master	--将本地仓库推送到远程，即把当前分支master推送到远程，如果远程库时空的，第一次推送master分支时，添加-u参数，git不但会把本地master的分支推送到远程的新的master分支，还会把本地的master分支和远程master分支关联起来，在以后的推送过程中就可以简化命令
	git push origin master	--将本地的master分支推送到github
	git clone git@github.com:username/gitskills.git	--克隆一个github上的库到本地
	git checkout -b branchname	--创建并切换到分支branchname
	git branch branch		--创建分支branche
	git checkout branch		--切换到分支branch
	git branche			--查看所有分支和当前所在分支
	git merge branchename		--将制定分区branchname合并到当前分区
	git branch -d branchname	--删除分支branchname
	git log --graph --pretty=oneline --abbrev-commit	--查看日志，分支合并图
	git merge --no-ff -m 'comments' branchnane	--强制禁用fastforward模式合并分支，并添加备注信息
	git stash			--保存分支快照
	git stash list			--查看保存的快照
	git stash apply			--恢复最近的一次快照，但不删除快照
	git stash pop			--恢复最近的一次快照并删除
	git stash apply stash@{1}	--恢复指定的快照版本
	git branch -D branchname	--强制删除分支（未进行合并的分支在普通删除时会失败）
	git remote			--查看远程库的主分支名称
	git remote -v			--查看远程库更详细信息（推送和拉取权限）
	git push origin master		--将本地master分支的所有提交推送到远程库。如果推送其他分支：git push origin branchname
	git clone git@github.com:username/learngit.git	--克隆分支
	git branch --set-upstream dev origin/dev	--关联本地dev分支和远程dev分支
	git pull			--获取最新提交	
	git tag tagname			--在最近一次提交上添加标签
	git tag				--查看tag列表
	git tag tagname commit-id	--在指定提交版本上添加标签
	git show tagname		--查看标签详细信息
	git tag -a tagname -m ‘comments’ branch-id	--添加标签
	git tag -s tagname -m ‘comments’ commit-id	--私钥签名一个标签，使用pgp签名，需要安装gpg，否则会提示失败
	git tag -d tagname		--删除标签
	git push origin tagname		--推送标签到远程
	git push origin --tags		--推送本地所有标签到远程
	git push origin :refs/tags/tagname	--删除远程标签，需要先删除本地标签
	git add -f app.class		--强制添加一个忽略文件到暂存区
	git check-ignore -v app.class	--查看忽略匹配规则
4、git已经提交到工作区的文件，在经过再次修改然后commit时，不会将最新的文件内容提交，只是将上次提交到暂存区的文件提交到仓库中。
5、通常，合并分支时，如果可能，git会用fast forward模式，但是这种模式下删除分支后，会丢掉分支信息。如果要强制禁用fast forward模式，merge时添加--no-off参数。
6、分支管理策略：
	master分支应该是稳定分支，仅用来发布新版本，平时不在上面修改。
	其他branch分支是不稳定的，在发布版本的时候将branch合并到master。
	在开发过程中可以每个团队成员创建一个分支来开发新功能或者bug修复。
	尽可能多用分支。
7、分支推送原则：
	master分支是主分支，因此要时刻与远程同步。
	dev分支用于开发，团队所有成员都要在上面工作，因此也需要与远程同步。
	bug分支只用于在本地修改bug，没必要推送远程，不过并不绝对。
	feature分支是否推送远程取决于是否由团队共同完成此次开发。
	总之，git的所有分支是否要同步远程完全取决于个人偏好，但是团队要遵循共同原则。
8、在使用git时，如果命令出现错误或者警告提示，可以从提示信息中查找解决方案。
9、忽略文件：
	在工作区根目录下添加.gitignore文件，将忽略文件名添加进去。
	可以从https://github.com/github/gitignore获取已有模版，在此基础上修改。
	忽略文件原则时：
		忽略操作系统自动生成的文件，比如缩略图等；
		忽略编译生成的中间文件、可执行文件等，比如java的class文件
		忽略个人敏感信息，比如包含敏感信息的配置文件等。
10、配置文件
	git config时，如果添加--global则为全局配置，否则只对当前仓库生效
	全局配置文件位于用户home目录下的.gitconfig文件中
	每个仓库的git配置文件都放在仓库工作区的.git/config文件夹下
11、搭建git服务器
	a、安装git：sudo apt-get install git
	b、创建git用户：sudo adduser git
	c、创建证书登录：收集客户端rsa公钥，添加到/home/git/.ssh/authorized_keys
	d、初始化仓库：sudo git init --bare sample.git
	   修改owner：sudo chown -R git:git sample.git
	e、禁用git用户的shell登录：编辑/etc/passwd文件：
		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
	f、克隆远程仓库：git clone git@server:/git-repo/sample.git
	h、管理公钥：gitosis	管理权限：gitolite
12、git官方文档：https://git-scm.com/doc

